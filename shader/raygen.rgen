#version 460
#extension GL_NV_ray_tracing : require

layout(set = 0, binding = 0) uniform accelerationStructureNV tlas;
layout(set = 2, binding = 0, rgba8) uniform image2D output_image;

layout (set = 1, binding = 0) uniform View {
    mat4 inv_proj;
    mat4 inv_view;
} view;

struct RayPayload {
	vec4 color;
	float distance;
    float factor;
};

layout (constant_id = 0) const int MAX_ITERATION = 20;
layout (constant_id = 1) const float RAY_OFFSET = 0.000001;

layout(location = 0) rayPayloadNV RayPayload pay_load;

float new_alpha(float current, float new) {
    // return (1.0 - current.w) * new.w;
    return min(1.0 - current, new);
}

vec4 alpha_blending(vec4 current, vec4 new) {
    float current_alpha_factor = current.w;
    float new_alpha_factor = new_alpha(current.w, new.w);

    vec3 color = (current.xyz * 1.0) + (new.xyz * new_alpha_factor);
    float alpha = current_alpha_factor + new_alpha_factor;

    return vec4(color, alpha);
}

void main() {
    const vec2 pixel_center = vec2(gl_LaunchIDNV.xy) + vec2(0.5);
    const vec2 in_uv = pixel_center / vec2(gl_LaunchSizeNV.xy);
    vec2 d = in_uv * 2.0 - 1.0;

    vec4 origin = view.inv_view * vec4(0.0, 0.0, 0.0, 1.0);
    vec4 target = view.inv_proj * vec4(d.x, d.y, 1.0, 1.0);
    vec4 direction = view.inv_view * vec4(normalize(target.xyz), 0.0);

    uint ray_flags = gl_RayFlagsOpaqueNV;
    uint cull_mask = 0xff;
    const int pay_load_index = 0;
    int hit_shader_index = 1;
    int miss_shader_index = 1;
    int sbt_record_stride = 0;
    float tmin = RAY_OFFSET;
    float tmax = 10000.0;

    vec4 source_color = imageLoad(output_image, ivec2(gl_LaunchIDNV.xy));

    // check if all layers are transparent

    // {
    //     traceNV(
    //         tlas,
    //         ray_flags | gl_RayFlagsSkipClosestHitShaderNV,
    //         cull_mask,
    //         hit_shader_index,
    //         sbt_record_stride,
    //         miss_shader_index,
    //         origin.xyz,
    //         tmin,
    //         direction.xyz,
    //         tmax,
    //         pay_load_index
    //     );

    //     // if we missed
    //     if (pay_load.distance == -1.0) {
    //         imageStore(output_image, ivec2(gl_LaunchIDNV.xy), source_color);

    //         return;
    //     }
    // }

    hit_shader_index = 0;
    miss_shader_index = 0;

    vec4 color = vec4(0.0);

    for (int i = 0; i < MAX_ITERATION; i++) {
        // cast a ray
        traceNV(
            tlas,
            ray_flags,
            cull_mask,
            hit_shader_index,
            sbt_record_stride,
            miss_shader_index,
            origin.xyz,
            tmin,
            direction.xyz,
            tmax,
            pay_load_index
        );

        // break if we haven't hit anything
        if (pay_load.distance < 0.0) {
            break;
        }

        // vec4 cos_color = vec4(pay_load.color.xyz, pay_load.color.w * pay_load.cos);
        vec4 factored_color = vec4(pay_load.color.xyz, pay_load.color.w * pay_load.factor);

        if (factored_color.w > 0.0) {
            color = alpha_blending(color, factored_color);
        }

        // break if color fully opaque
        if (color.w == 1.0) {
            break;
        }

        // calculate new origin
        origin.xyz = origin.xyz + direction.xyz * pay_load.distance;
    }

    // blend background as last layer
    color = alpha_blending(color, source_color);

    imageStore(output_image, ivec2(gl_LaunchIDNV.xy), color);
}
